from traceback import format_exc

from pyrogram.errors import PeerIdInvalid, RPCError
from pyrogram.types import Message

from Curse import LOGGER
from Curse.bot_class import app
from Curse.database.group_blacklist import GroupBlacklist
from Curse.utils.custom_filters import command

db = GroupBlacklist()


@app.on_message(command("blchat", dev_cmd=True))
async def blacklist_chat(c: app, m: Message):
    if len(m.text.split()) >= 2:
        chat_ids = m.text.split()[1:]
        replymsg = await m.reply_text(f"·¥Ñ ú·¥Ä·¥õs ·¥Ä Ä·¥á …¢·¥è…™…¥…¢ ·¥õ·¥è ·¥õ ú·¥á  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ {len(chat_ids)} ·¥è“ì ·¥õ ú·¥á·¥ç ·¥Ä Ä·¥á ·¥Ñ·¥è·¥ç…™…¥…¢.")
        LOGGER.info(f"·¥ç·¥è Ä·¥á …¢ Ä·¥è·¥ú·¥òs  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ·¥á·¥Ö  ô è {m.from_user.id} ·¥°…™·¥õ ú ·¥õ ú·¥á  ô·¥è·¥õ. ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ' ü ü ·¥Ñ·¥è·¥ò·¥á ·¥°…™·¥õ ú·¥è·¥ú·¥õ  è·¥è·¥ú. üî•")
        for chat in chat_ids:
            try:
                get_chat = await c.get_chat(chat)
                chat_id = get_chat.id
                db.add_chat(chat_id)
            except PeerIdInvalid:
                await replymsg.edit_text(
                    "·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò ·¥Ñ·¥Ä…¥'·¥õ ·¥á·¥†·¥á…¥ ·¥Ö·¥á·¥Ä ü ·¥°…™·¥õ ú ·¥õ ú·¥á ·¥ç…™ss…™…¥…¢ ·¥á…¥·¥á Ä…¢ è. ·¥°·¥Ä…™·¥õ ·¥ú…¥·¥õ…™ ü …™·¥õ ·¥Ñ·¥è·¥ç·¥ás ·¥è·¥†·¥á Ä! üí£",
                )
            except RPCError as ef:
                LOGGER.error(ef)
                LOGGER.error(format_exc())
        await replymsg.edit_text(
            f"·¥Ö·¥á·¥Ä ü·¥õ ·¥°…™·¥õ ú ·¥õ ú·¥ás·¥á ·¥Ñ ú·¥Ä·¥õs.  ü…™s·¥õ …™s …¥·¥è·¥° ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö: <code>{', '.join(chat_ids)}</code>. üí•",
        )
    return


@app.on_message(
    command(["rmblchat", "unblchat"], dev_cmd=True),
)
async def unblacklist_chat(c: app, m: Message):
    if len(m.text.split()) >= 2:
        chat_ids = m.text.split()[1:]
        replymsg = await m.reply_text(f"·¥áx·¥õ Ä·¥Ä·¥Ñ·¥õ…™…¥…¢ ·¥õ ú·¥ás·¥á ·¥Ñ ú·¥Ä·¥õs “ì Ä·¥è·¥ç ·¥õ ú·¥á  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ... ·¥Ö·¥è…¥'·¥õ ·¥°·¥è Ä Ä è, ·¥ç·¥è Ä·¥á ·¥°…™ ü ü  ô·¥á ·¥è·¥ú·¥õ ·¥õ·¥è …¢·¥á·¥õ! üí£")
        LOGGER.info(f"{m.from_user.id} ·¥á Ä·¥Äs·¥á·¥Ö ·¥õ ú·¥ás·¥á ·¥ç·¥á·¥Ä…¥…™·¥á ·¥Ñ ú·¥Ä·¥õs “ì Ä·¥è·¥ç ·¥õ ú·¥á  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ. ·¥á ü·¥á·¥†·¥Ä·¥õ…™…¥…¢ ·¥õ ú·¥á ·¥ç·¥è·¥ç·¥á…¥·¥õ. üí•")
        bl_chats = db.list_all_chats()
        for chat in chat_ids:
            try:
                get_chat = await c.get_chat(chat)
                chat_id = get_chat.id
                if chat_id not in bl_chats:

                    continue
                db.remove_chat(chat_id)
            except PeerIdInvalid:
                await replymsg.edit_text(
                    "·¥Ö…™·¥Ö…¥'·¥õ ·¥Ñ·¥è·¥ç·¥á ·¥Ä·¥Ñ Ä·¥èss ·¥õ ú…™s …¢ Ä·¥è·¥ú·¥ò ·¥õ·¥è·¥Ö·¥Ä è, ·¥ç·¥Ä è ô·¥á ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥Ä…¢·¥Ä…™…¥  ü·¥Ä·¥õ·¥á Ä. ü§∑‚Äç‚ôÄÔ∏è",
                )
            except RPCError as ef:
                LOGGER.error(ef)
                LOGGER.error(format_exc())
        await replymsg.edit_text(
            f"·¥õ ú·¥ás·¥á ·¥Ñ ú·¥Ä·¥õs ·¥Ñ·¥Ä…¥'·¥õ  ú·¥Ä…¥…¢·¥á ·¥è·¥ú·¥õ ·¥Ä…¥ è·¥ç·¥è Ä·¥á, ·¥õ ú·¥á è' Ä·¥á …¥·¥è·¥° ·¥è…¥ ·¥õ ú·¥á  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ. üíÄ\n<code>{', '.join(chat_ids)}</code>",
        )
    return


@app.on_message(
    command(["blchatlist", "blchats"], dev_cmd=True),
)
async def list_blacklist_chats(_, m: Message):
    bl_chats = db.list_all_chats()
    LOGGER.info(f"{m.from_user.id} …™s ·¥Ñ ú·¥á·¥Ñ·¥ã…™…¥…¢ ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò's  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ …™…¥ {m.chat.id}. üëÄ")
    if bl_chats:
        txt = (
            (
                "·¥õ ú·¥ás·¥á ·¥Ñ ú·¥Ä·¥õs ·¥Ä Ä·¥á ·¥õ ú·¥á ·¥ç·¥Ä·¥Ö ·¥è·¥ú·¥õ ·¥è“ì ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö:\n"
                + "\n".join(f"<code>{i}</code>" for i in bl_chats)
            ),
        )

    else:
        txt = "·¥Ñ·¥è…¥·¥è·¥õ ·¥á·¥†·¥á…¥ ·¥õ ú·¥á ·¥õ·¥á·¥Ä·¥ç ·¥è·¥ò·¥á…¥. …¥·¥è ·¥Ñ ú·¥Ä·¥õs ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è  ô ü·¥Ä·¥Ñ·¥ã ü…™s·¥õ·¥á·¥Ö!"
    await m.reply_text(txt)
    return
