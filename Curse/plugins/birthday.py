import datetime
from datetime import date, datetime, time
from random import choice
from traceback import format_exc

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pyrogram import filters
from pyrogram.enums import ChatMemberStatus, ChatType
from pyrogram.types import CallbackQuery
from pyrogram.types import InlineKeyboardButton as IKB
from pyrogram.types import InlineKeyboardMarkup as IKM
from pyrogram.types import Message

from Curse import BDB_URI, LOGGER, TIME_ZONE
from Curse.bot_class import app
from Curse.database.chats_db import Chats

if BDB_URI:
    from Curse.plugins import bday_cinfo, bday_info

from Curse.utils.custom_filters import command
from Curse.utils.extras import birthday_wish


def give_date(date, form="%d/%m/%Y"):
    datee = datetime.strptime(date, form).date()
    return datee


@app.on_message(command("remember"))
async def remember_me(c: app, m: Message):
    if not BDB_URI:
        await m.reply_text("BDB_URI …™s…¥'·¥õ s·¥á·¥õ ·¥ú·¥ò. F…™x ·¥õ ú…™s  ô·¥á“ì·¥è Ä·¥á I  ü·¥ès·¥á ·¥ç è ·¥ò·¥Ä·¥õ…™·¥á…¥·¥Ñ·¥á.")
        return
    splited = m.text.split()
    if len(splited) == 1:
        await m.reply_text(
            "**USAGE**:\n/ Ä·¥á·¥ç·¥á·¥ç ô·¥á Ä [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä ·¥ús·¥á Ä …™·¥Ö ·¥è Ä  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥ús·¥á Ä] [DOB]\…¥D·¥è…¥'·¥õ “ì·¥è Ä…¢·¥á·¥õ ·¥õ·¥è ·¥ò·¥ú·¥õ ·¥õ ú·¥á ·¥Ö·¥Ä·¥õ·¥á …™…¥ ·¥Ö·¥Ö/·¥ç·¥ç/ è è è è “ì·¥è Ä·¥ç·¥Ä·¥õ.\…¥T ú·¥á  è·¥á·¥Ä Ä? P“ì“ì·¥õ, …™·¥õ‚Äôs …¥·¥è·¥õ ·¥ç·¥Ä…¥·¥Ö·¥Ä·¥õ·¥è Ä è,  ô·¥ú·¥õ …™“ì  è·¥è·¥ú “ì·¥á·¥á ü  ü…™·¥ã·¥á s ú·¥è·¥°…™…¥…¢ ·¥è“ì“ì,  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ä·¥Ö·¥Ö …™·¥õ.."
        )
        return
    if len(splited) != 2 and m.reply_to_message:
        await m.reply_text(
            "**USAGE**:\…¥/ Ä·¥á·¥ç·¥á·¥ç ô·¥á Ä [·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥è Ä ·¥ús·¥á Ä …™·¥Ö ·¥è Ä  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥ús·¥á Ä] [DOB]\…¥D·¥è…¥'·¥õ “ì·¥è Ä…¢·¥á·¥õ ·¥õ·¥è ·¥ò·¥ú·¥õ ·¥õ ú·¥á ·¥Ö·¥Ä·¥õ·¥á …™…¥ ·¥Ö·¥Ö/·¥ç·¥ç/ è è è è “ì·¥è Ä·¥ç·¥Ä·¥õ.\…¥T ú·¥á  è·¥á·¥Ä Ä? P“ì“ì·¥õ, …™·¥õ‚Äôs …¥·¥è·¥õ ·¥ç·¥Ä…¥·¥Ö·¥Ä·¥õ·¥è Ä è,  ô·¥ú·¥õ …™“ì  è·¥è·¥ú “ì·¥á·¥á ü  ü…™·¥ã·¥á s ú·¥è·¥°…™…¥…¢ ·¥è“ì“ì,  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ä·¥Ö·¥Ö …™·¥õ."
        )
        return
    DOB = splited[1] if len(splited) == 2 else splited[2]
    if len(splited) == 2 and m.reply_to_message:
        user = m.reply_to_message.from_user.id
    elif not m.reply_to_message:
        user = m.from_user.id
    else:
        try:
            u_id = int(splited[1])
        except ValueError:
            pass
        try:
            user = await c.get_users(u_id)
        except Exception:
            u_u = await c.resolve_peer(u_id)
            try:
                user = (await c.get_users(u_u.user_id)).id
            except KeyError:
                await m.reply_text("C·¥è·¥ú ü·¥Ö…¥‚Äô·¥õ “ì…™…¥·¥Ö ·¥õ ú·¥á ·¥ús·¥á Ä... ü§î\nM·¥Ä·¥ã·¥á s·¥ú Ä·¥á  è·¥è·¥ú‚Äô·¥†·¥á ·¥ç·¥á…¥·¥õ…™·¥è…¥·¥á·¥Ö ·¥è Ä  Ä·¥á·¥ò ü…™·¥á·¥Ö ·¥õ·¥è ·¥õ ú·¥á·¥ç ·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ ü è.")
                return
    DOB = DOB.split("/")
    if len(DOB) != 3 and len(DOB) != 2:
        await m.reply_text(
            "D·¥Ä·¥õ·¥á ·¥è“ì  ô…™ Ä·¥õ ú ·¥ç·¥ús·¥õ  ô·¥á …™…¥ < ô>·¥Ö·¥Ö/·¥ç·¥ç/ è è è è “ì·¥è Ä·¥ç·¥Ä·¥õ. Y·¥á·¥Ä Ä …™s ·¥è·¥ò·¥õ…™·¥è…¥·¥Ä ü,  ô·¥ú·¥õ s·¥õ…™ ü ü, …¢·¥á·¥õ …™·¥õ  Ä…™…¢ ú·¥õ!""
        )
        return
    is_correct = False
    if len(DOB) == 3:
        is_correct = len(DOB[2]) == 4
    if len(DOB[0]) != 2 and len(DOB[1]) != 2 and not is_correct:
        await m.reply_text(
            "‚ö°Ô∏è T·¥Ñ ú, ·¥õ ú·¥á </b>DOB s ú·¥è·¥ú ü·¥Ö  ô·¥á …™…¥ ·¥õ ú·¥á “ì·¥è Ä·¥ç·¥Ä·¥õ </b>·¥Ö·¥Ö/·¥ç·¥ç/ è è è è! I“ì  è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ ·¥°·¥Ä…¥·¥õ ·¥õ·¥è …™…¥·¥Ñ ü·¥ú·¥Ö·¥á ·¥õ ú·¥á  è·¥á·¥Ä Ä, “ì…™…¥·¥á...  ô·¥ú·¥õ  Ä·¥ú ü·¥ás ·¥Ä Ä·¥á  Ä·¥ú ü·¥ás!"
        )
        return
    try:
        date = int(DOB[0])
        month = int(DOB[1])
        if is_correct:
            year = int(DOB[2])
            is_year = 1
        else:
            year = "1900"
            is_year = 0
        DOB = f"{str(date)}/{str(month)}/{str(year)}"
    except ValueError:
        await m.reply_text("DOB s ú·¥è·¥ú ü·¥Ö  ô·¥á …™…¥ ·¥õ ú·¥á “ì·¥è Ä·¥ç·¥Ä·¥õ ·¥Ö·¥Ö/·¥ç·¥ç/ è è è è\…¥O…¥ ü è …¥·¥ú·¥ç ô·¥á Äs ·¥Ä ü ü·¥è·¥°·¥á·¥Ö, …¥·¥è ·¥áx·¥Ñ·¥á·¥ò·¥õ…™·¥è…¥s!")
        return

    data = {"user_id": user, "dob": DOB, "is_year": is_year}
    try:
        result = bday_info.find_one({"user_id": user})
        if result:
            await m.reply_text("T ú…™s ·¥ús·¥á Ä …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è  Ä·¥á…¢…™s·¥õ·¥á Ä·¥á·¥Ö …™…¥ ·¥ç è ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á. N·¥è …¥·¥á·¥á·¥Ö ·¥õ·¥è ·¥Ä·¥Ö·¥Ö ·¥õ ú·¥á·¥ç ·¥Ä…¢·¥Ä…™…¥!")
            return
    except Exception as e:
        await m.reply_text(f"A…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö! H·¥á Ä·¥á's ·¥õ ú·¥á ·¥Ö·¥á·¥õ·¥Ä…™ üs:\n{e}")
        LOGGER.error(e)
        LOGGER.error(format_exc())
        return
    try:
        bday_info.insert_one(data)
        await m.reply_text("Y·¥è·¥ú Ä  ô…™ Ä·¥õ ú·¥Ö·¥Ä è  ú·¥Äs  ô·¥á·¥á…¥ s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è s·¥Ä·¥†·¥á·¥Ö …™…¥ ·¥ç è ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á!")
    except Exception as e:
        await m.reply_text(f"A…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö! H·¥á Ä·¥á's ·¥õ ú·¥á ·¥Ö·¥á·¥õ·¥Ä…™ üs:\n{e}")
        LOGGER.error(e)
        LOGGER.error(format_exc())
        return


@app.on_message(command(["removebday", "rmbday"]))
async def who_are_you_again(c: app, m: Message):
    if not BDB_URI:
        await m.reply_text("BDB_URI …™s…¥'·¥õ s·¥á·¥õ ·¥ú·¥ò. F…™x ·¥õ ú…™s  ô·¥á“ì·¥è Ä·¥á I  ü·¥ès·¥á ·¥ç è ·¥ò·¥Ä·¥õ…™·¥á…¥·¥Ñ·¥á.")
        return
    user = m.from_user.id
    try:
        result = bday_info.find_one({"user_id": user})
        if not result:
            await m.reply_text("S·¥è Ä Ä è, I ·¥Ñ·¥è·¥ú ü·¥Ö…¥'·¥õ “ì…™…¥·¥Ö ·¥õ ú…™s ·¥ús·¥á Ä …™…¥ ·¥ç è ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á!")
            return
        elif result:
            bday_info.delete_one({"user_id": user})
            await m.reply_text("Y·¥è·¥ú Ä  ô…™ Ä·¥õ ú·¥Ö·¥Ä è... …™·¥õ's …¢·¥è…¥·¥á …¥·¥è·¥°. N·¥á·¥†·¥á Ä ·¥õ·¥è  ô·¥á  Ä·¥á·¥ç·¥á·¥ç ô·¥á Ä·¥á·¥Ö ·¥Ä…¢·¥Ä…™…¥.")
            return
    except Exception as e:
        await m.reply_text(f"A…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö! H·¥á Ä·¥á's ·¥õ ú·¥á ·¥Ö·¥á·¥õ·¥Ä…™ üs:\n{e}")
        return


@app.on_message(command(["nextbdays", "nbdays", "birthdays", "bdays"]))
async def who_is_next(c: app, m: Message):
    if not BDB_URI:
        await m.reply_text("BDB_URI …™s…¥'·¥õ s·¥á·¥õ ·¥ú·¥ò. F…™x ·¥õ ú…™s  ô·¥á“ì·¥è Ä·¥á I  ü·¥ès·¥á ·¥ç è ·¥ò·¥Ä·¥õ…™·¥á…¥·¥Ñ·¥á.")
        return
    blist = list(bday_info.find())
    if m.chat.type == ChatType.PRIVATE:
        await m.reply_text("C·¥Ä…¥'·¥õ ·¥Ö·¥è ·¥õ ú…™s  ú·¥á Ä·¥á. Us·¥á …™·¥õ …™…¥ ·¥Ä …¢ Ä·¥è·¥ú·¥ò, ·¥è Ä  è·¥è·¥ú' Ä·¥á ·¥è…¥  è·¥è·¥ú Ä ·¥è·¥°…¥. üëø")
        return
    curr = datetime.now(TIME_ZONE).date()
    xx = await m.reply_text("üìÜ")
    users = []
    today_users = []  # Users with birthday today

    if blist:
        for i in blist:
            if Chats(m.chat.id).user_is_in_chat(i["user_id"]):
                dob = give_date(i["dob"])
                if dob.month >= curr.month:
                    if (
                        dob.month == curr.month and not dob.day < curr.day
                    ) or dob.month >= curr.month:
                        if dob.month == curr.month and dob.day == curr.day:
                            today_users.append(i)  # Add to today's users list
                        else:
                            users.append(i)
                elif dob.month < curr.month:
                    pass
            if len(users) == 10:
                break

    if not users and not today_users:
        await xx.delete()
        await m.reply_text("L·¥è·¥è·¥ãs  ü…™·¥ã·¥á ·¥õ ú·¥á Ä·¥á's …¥·¥è  ô…™ Ä·¥õ ú·¥Ö·¥Ä è  ú·¥á Ä·¥á...  ô·¥á·¥õ·¥õ·¥á Ä  ü·¥ú·¥Ñ·¥ã …¥·¥áx·¥õ ·¥õ…™·¥ç·¥á, ·¥ç·¥Ä è ô·¥á? :/")
        return

    # Sort the users list by the number of days remaining until their birthday
    users.sort(
        key=lambda x: (
            date(curr.year, give_date(x["dob"]).month, give_date(x["dob"]).day) - curr
        ).days
    )

    # Combine today's users with the rest of the users list
    users = today_users + users

    txt = "üî• ·¥ú…¥·¥Ö·¥á Ä ·¥õ ú·¥á  ú·¥è·¥è·¥Ö ·¥è“ì …™…¥·¥Ñ·¥è·¥ç…™…¥…¢ ·¥ç·¥è·¥ç·¥á…¥·¥õs üî•\n\n"
    for i in users:
        user_id = i["user_id"]
        try:
            user = await c.get_users(user_id)
            first_name = user.first_name
            last_name = user.last_name or ""
            user_link = f"[{first_name} {last_name}](tg://user?id={user_id})"

            dob = give_date(i["dob"])
            birthday = date(curr.year, dob.month, dob.day)
            if birthday == curr:  # Birthday is today
                days_left = "üî• ·¥õ·¥è·¥Ö·¥Ä è'Íú±  ô…™ Ä·¥õ ú·¥Ö·¥Ä è! üî•\n\n üéâ ·¥õ…™·¥ç·¥á ·¥õ·¥è ·¥Ñ·¥á ü·¥á ô Ä·¥Ä·¥õ·¥á, ·¥õ ú·¥á ·¥Ö·¥Ä è …™s  ú·¥á Ä·¥á! üéâ"
                bday_date = curr.strftime("%B %d")
            else:
                days_left = (birthday - curr).days
                bday_date = birthday.strftime("%B %d")

            txt += f"{days_left} days ({bday_date}) - {user_link}\n"
        except Exception:
            pass

    await xx.delete()
    await m.reply_text(txt, disable_web_page_preview=True)
    return


@app.on_message(command(["getbday", "gbday", "mybirthday", "mybday"]))
async def cant_recall_it(c: app, m: Message):
    if not BDB_URI:
        await m.reply_text("BDB_URI …™s…¥'·¥õ s·¥á·¥õ ·¥ú·¥ò. F…™x ·¥õ ú…™s  ô·¥á“ì·¥è Ä·¥á I  ü·¥ès·¥á ·¥ç è ·¥ò·¥Ä·¥õ…™·¥á…¥·¥Ñ·¥á")
        return
    user = m.from_user.id
    men = m.from_user.mention
    if m.reply_to_message:
        user = m.reply_to_message.from_user.id
        men = m.reply_to_message.from_user.mention
    try:
        result = bday_info.find_one({"user_id": user})
        if not result:
            await m.reply_text("·¥õ ú…™s ·¥ús·¥á Ä …™s…¥'·¥õ …™…¥ ·¥ç è ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á. …¥·¥è ·¥õ Ä·¥Ä·¥Ñ·¥áÍú± “ì·¥è Ä ·¥õ ú…™s ·¥è…¥·¥á!")
            return
    except Exception as e:
        await m.reply_text(f"A…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö! H·¥á Ä·¥á's ·¥õ ú·¥á ·¥Ö·¥á·¥õ·¥Ä…™ üs:\n{e}")
        return

    curr = datetime.now(TIME_ZONE).date()
    u_dob = give_date(result["dob"])
    if u_dob.month < curr.month:
        next_b = date(curr.year + 1, u_dob.month, u_dob.day)
        days_left = (next_b - curr).days
        txt = f"{men} 's  ô…™ Ä·¥õ ú·¥Ö·¥Ä è  ú·¥Äs ·¥Ä ü Ä·¥á·¥Ä·¥Ö è …¢·¥è…¥·¥á  ô è ü´§\nJ·¥ús·¥õ {days_left} ·¥Ö·¥Ä ès ·¥ú…¥·¥õ…™ ü ·¥õ ú·¥á…™ Ä …¥·¥áx·¥õ ·¥Ñ·¥á ü·¥á ô Ä·¥Ä·¥õ…™·¥è…¥!"
    else:
        u_dobm = date(curr.year, u_dob.month, u_dob.day)
        days_left = (u_dobm - curr).days
        txt = f"·¥ús·¥á Ä‚Äôs  ô…™ Ä·¥õ ú·¥Ö·¥Ä è …™s …¥·¥á·¥Ä Ä ü•≥\n·¥Ö·¥Ä ès  Ä·¥á·¥ç·¥Ä…™…¥…™…¥…¢: {days_left}"
    await m.reply_text(txt)
    return


@app.on_message(command(["settingbday", "sbday"]))
async def chat_birthday_settings(c: app, m: Message):
    if not BDB_URI:
        await m.reply_text("BDB_URI …™s…¥'·¥õ s·¥á·¥õ ·¥ú·¥ò. F…™x ·¥õ ú…™s  ô·¥á“ì·¥è Ä·¥á I  ü·¥ès·¥á ·¥ç è ·¥ò·¥Ä·¥õ…™·¥á…¥·¥Ñ·¥á")
        return
    if m.chat.type == ChatType.PRIVATE:
        await m.reply_text("Us·¥á ·¥õ ú…™s …™…¥ ·¥Ä …¢ Ä·¥è·¥ú·¥ò ·¥õ·¥è s·¥á·¥á ·¥° ú·¥è's  ô…™ Ä·¥õ ú·¥Ö·¥Ä è …™s ·¥Ñ·¥è·¥ç…™…¥…¢ ·¥ú·¥ò!")
        return
    chats = m.chat.id
    c_in = bday_cinfo.find_one({"chat_id": chats})
    kb = IKM(
        [
            [
                IKB(
                    f"{'Yes' if not c_in else 'No'}",
                    f"switchh_{'yes' if not c_in else 'no'}",
                ),
                IKB("Close", "f_close"),
            ]
        ]
    )
    await m.reply_text(
        "üéâ B…™ Ä·¥õ ú·¥Ö·¥Ä è A ü·¥á Ä·¥õ! üéÇ\n\nH·¥á è [{username}], …™·¥õ‚Äôs  è·¥è·¥ú Ä s·¥ò·¥á·¥Ñ…™·¥Ä ü ·¥Ö·¥Ä è ·¥õ·¥è·¥Ö·¥Ä è! ü•≥ L·¥á·¥õ‚Äôs ·¥ç·¥Ä·¥ã·¥á …™·¥õ ·¥ç·¥á·¥ç·¥è Ä·¥Ä ô ü·¥á! üéà", reply_markup=kb
    )
    return


@app.on_callback_query(filters.regex("^switchh_"))
async def switch_on_off(c: app, q: CallbackQuery):
    user = (await q.message.chat.get_member(q.from_user.id)).status
    await q.message.chat.get_member(q.from_user.id)
    if user not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
        await q.answer("...")
        return
    data = q.data.split("_")[1]
    chats = q.message.chat.id
    xXx = {"chat_id": chats}
    if data == "yes":
        bday_cinfo.delete_one(xXx)
    elif data == "no":
        bday_cinfo.insert_one(xXx)
    await q.edit_message_text(
        f"Done! I will {'wish' if data == 'yes' else 'not wish'}",
        reply_markup=IKM([[IKB("Close", "f_close")]]),
    )
    return


scheduler = AsyncIOScheduler()
scheduler.timezone = TIME_ZONE
scheduler_time = time(0, 0, 0)


async def send_wishish(JJK: app):
    c_list = Chats.list_chats_by_id()
    blist = list(bday_info.find())
    curr = datetime.now(TIME_ZONE).date()
    cclist = list(bday_cinfo.find())
    for i in blist:
        dob = give_date(i["dob"])
        if dob.month == curr.month and dob.day == curr.day:
            for j in c_list:
                if cclist and (j in cclist):
                    return
                try:
                    agee = ""
                    if i["is_year"]:
                        agee = curr.year - dob.year
                        if str(agee).endswith("1"):
                            agee = f"{agee}st"
                        elif str(agee).endswith("2"):
                            agee = f"{agee}nd"
                        elif str(agee).endswith("3"):
                            agee = f"{agee}rd"
                        else:
                            agee = f"{agee}th"
                    U = await JJK.get_chat_member(chat_id=j, user_id=i["user_id"])
                    wish = choice(birthday_wish)
                    if U.status in [
                        ChatMemberStatus.MEMBER,
                        ChatMemberStatus.ADMINISTRATOR,
                        ChatMemberStatus.OWNER,
                    ]:
                        xXx = await JJK.send_message(
                            j, f"üéâ H·¥Ä·¥ò·¥ò è {agee} B…™ Ä·¥õ ú·¥Ö·¥Ä è, {u.user.mention}! ü•≥\n{wish} L·¥á·¥õ's ·¥ç·¥Ä·¥ã·¥á …™·¥õ ·¥Ä…¥ ·¥ú…¥“ì·¥è Ä…¢·¥á·¥õ·¥õ·¥Ä ô ü·¥á ·¥è…¥·¥á! üéÇüéà"
                        )
                        try:
                            await xXx.pin()
                        except Exception:
                            pass
                except Exception:
                    pass


""""
from datetime import date, datetime

#form = 
num = "18/05/2005"
st = "18 May 2005"
timm = datetime.strptime(num,"%d/%m/%Y").date()
x = datetime.now().date()
if timm.month < x.month:
    next_b = date(x.year + 1, timm.month, timm.day)
    days_left = (next_b - x).days
else:
    timmm = date(x.year, timm.month, timm.day)
    days_left = (timmm - x).days
print(days_left)
print(x.year - timm.year)
"""


__PLUGIN__ = " ô…™ Ä·¥õ ú·¥Ö·¥Ä è"

__HELP__ = """

‚û• /remember R·¥á·¥ò ü è ·¥°…™·¥õ ú [DOB] ·¥õ·¥è  Ä·¥á…¢…™s·¥õ·¥á Ä  è·¥è·¥ú Ä ·¥Ö·¥Ä·¥õ·¥á ·¥è“ì  ô…™ Ä·¥õ ú …™…¥ ·¥ç è ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á. I“ì  è·¥è·¥ú ·¥Ö·¥è…¥‚Äô·¥õ ·¥õ·¥Ä…¢ s·¥è·¥ç·¥á·¥è…¥·¥á, I‚Äô ü ü ·¥Äss·¥ú·¥ç·¥á …™·¥õ‚Äôs  è·¥è·¥ú Ä  ô…™ Ä·¥õ ú·¥Ö·¥Ä è. D·¥è…¥‚Äô·¥õ ·¥ç·¥áss ·¥°…™·¥õ ú ·¥ç·¥á, …¢·¥è·¥õ …™·¥õ?
‚û• /nextbdays (/nbdays,/brithdays,/bdays) : Return upcoming birthdays of 10 useW·¥Ä…¥·¥õ ·¥õ·¥è ·¥ã…¥·¥è·¥° ·¥° ú·¥è's  ô…™ Ä·¥õ ú·¥Ö·¥Ä è's ·¥Ñ·¥è·¥ç…™…¥…¢ ·¥ú·¥ò …¥·¥áx·¥õ? H·¥á Ä·¥á's ·¥Ä  ü…™s·¥õ ·¥è“ì ùü∑ùü∂ ·¥ús·¥á Äs ·¥°…™·¥õ ú ·¥ú·¥ò·¥Ñ·¥è·¥ç…™…¥…¢  ô…™ Ä·¥õ ú·¥Ö·¥Ä ès!
‚û• /removebday (/rmbday) : O…¥ ü è  è·¥è·¥ú ·¥Ñ·¥Ä…¥  Ä·¥á·¥ç·¥è·¥†·¥á  è·¥è·¥ú Ä ·¥è·¥°…¥  ô…™ Ä·¥õ ú·¥Ö·¥Ä è “ì Ä·¥è·¥ç ·¥õ ú·¥á ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á, …¥·¥è·¥õ ·¥Ä…¥ è·¥è…¥·¥á ·¥á üs·¥á's!
‚û• /settingbday (/sbday) : C·¥è…¥“ì…™…¢·¥ú Ä·¥á ·¥õ ú·¥á s·¥á·¥õ·¥õ…™…¥…¢s “ì·¥è Ä  ô…™ Ä·¥õ ú·¥Ö·¥Ä è ·¥°…™s ú·¥ás ·¥Ä…¥·¥Ö ·¥è·¥õ ú·¥á Ä  Ä·¥á ü·¥Ä·¥õ·¥á·¥Ö “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás …™…¥ ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥õ.
‚û• /getbday (/gbday,/mybirthday,/mybday) [reply to user] : I“ì  è·¥è·¥ú  Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ús·¥á Ä, …™·¥õ ·¥°…™ ü ü “ì·¥á·¥õ·¥Ñ ú ·¥õ ú·¥á  Ä·¥á·¥ò ü…™·¥á·¥Ö ·¥ús·¥á Ä's  ô…™ Ä·¥õ ú·¥Ö·¥Ä è. I“ì …¥·¥è·¥õ, …™·¥õ ·¥°…™ ü ü  Ä·¥á·¥õ·¥ú Ä…¥  è·¥è·¥ú Ä ·¥è·¥°…¥  ô…™ Ä·¥õ ú·¥Ö·¥Ä è.

üéÇ DOB should be in format of dd/mm/yyyy
Year is optional it is not necessary to pass it
"""
